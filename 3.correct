instruction memory:
	instrMem[ 0 ] = 0x01000001 ( beq 0 0 1 )
	instrMem[ 1 ] = 0x00090001 ( add 1 1 1 )
	instrMem[ 2 ] = 0x00090002 ( add 1 1 2 )
	instrMem[ 3 ] = 0x01800000 ( halt )

@@@
state before cycle 0 starts:
	pc = 0
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? False (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 1 starts:
	pc = 1
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01000001 ( beq 0 0 1 )
		pcPlus1 = 1
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? False (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 2 starts:
	pc = 2
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00090001 ( add 1 1 1 )
		pcPlus1 = 2
	ID/EX pipeline register:
		instruction = 0x01000001 ( beq 0 0 1 )
		pcPlus1 = 1
		readRegA = 0
		readRegB = 0
		offset = 1
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? False (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 3 starts:
	pc = 3
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00090002 ( add 1 1 2 )
		pcPlus1 = 3
	ID/EX pipeline register:
		instruction = 0x00090001 ( add 1 1 1 )
		pcPlus1 = 2
		readRegA = 0
		readRegB = 0
		offset = 1 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01000001 ( beq 0 0 1 )
		branchTarget 2
		eq ? True
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 4 starts:
	pc = 2
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 3 (Don't Care)
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 3 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 2 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 3 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01000001 ( beq 0 0 1 )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 5 starts:
	pc = 3
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00090002 ( add 1 1 2 )
		pcPlus1 = 3
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 3 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 5 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01000001 ( beq 0 0 1 )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 6 starts:
	pc = 4
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01800000 ( halt )
		pcPlus1 = 4
	ID/EX pipeline register:
		instruction = 0x00090002 ( add 1 1 2 )
		pcPlus1 = 3
		readRegA = 0
		readRegB = 0
		offset = 2 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 3 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 7 starts:
	pc = 5
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		pcPlus1 = 5
	ID/EX pipeline register:
		instruction = 0x01800000 ( halt )
		pcPlus1 = 4
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x00090002 ( add 1 1 2 )
		branchTarget 5 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 8 starts:
	pc = 6
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		pcPlus1 = 6
	ID/EX pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		pcPlus1 = 5
		readRegA = 0
		readRegB = 0
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01800000 ( halt )
		branchTarget 4 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x00090002 ( add 1 1 2 )
		writeData = 0
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state
Machine halted
Total of 9 cycles executed
Final state of machine:

@@@
state before cycle 9 starts:
	pc = 7
	data memory:
		dataMem[ 0 ] = 0x01000001
		dataMem[ 1 ] = 0x00090001
		dataMem[ 2 ] = 0x00090002
		dataMem[ 3 ] = 0x01800000
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		pcPlus1 = 7
	ID/EX pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		pcPlus1 = 6
		readRegA = 0
		readRegB = 0
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x00000000 ( add 0 0 0 )
		branchTarget 5 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01800000 ( halt )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x00090002 ( add 1 1 2 )
		writeData = 0
end state
